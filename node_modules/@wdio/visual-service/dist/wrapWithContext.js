import { getInstanceData } from './utils.js';
/**
 * Wrap the command with the context manager
 * This will make sure that the context manager is updated when needed
 * and that the command is executed in the correct context
 */
export function wrapWithContext(opts) {
    const { browser, command, contextManager, getArgs } = opts;
    return async function () {
        if (contextManager.needsUpdate) {
            const instanceData = await getInstanceData({
                currentBrowser: browser,
                initialDeviceRectangles: contextManager.getViewportContext(),
                isNativeContext: contextManager.isNativeContext,
            });
            contextManager.setViewPortContext(instanceData.deviceRectangles);
        }
        const finalArgs = getArgs();
        return command.apply(this, finalArgs);
    };
}
