import { takeBase64BiDiScreenshot, takeBase64Screenshot } from '../methods/screenshots.js';
import { makeCroppedBase64Image } from '../methods/images.js';
import beforeScreenshot from '../helpers/beforeScreenshot.js';
import afterScreenshot from '../helpers/afterScreenshot.js';
import { determineScreenRectangles } from '../methods/rectangles.js';
import { canUseBidiScreenshot, getMethodOrWicOption } from '../helpers/utils.js';
/**
 * Saves an image of the viewport of the screen
 */
export default async function saveWebScreen({ methods, instanceData, folders, tag, saveScreenOptions, isNativeContext = false, }) {
    // 1a. Set some variables
    const { addressBarShadowPadding, addIOSBezelCorners, formatImageName, savePerInstance, toolBarShadowPadding } = saveScreenOptions.wic;
    // 1b. Set the method options to the right values
    const disableBlinkingCursor = getMethodOrWicOption(saveScreenOptions.method, saveScreenOptions.wic, 'disableBlinkingCursor');
    const disableCSSAnimation = getMethodOrWicOption(saveScreenOptions.method, saveScreenOptions.wic, 'disableCSSAnimation');
    const enableLayoutTesting = getMethodOrWicOption(saveScreenOptions.method, saveScreenOptions.wic, 'enableLayoutTesting');
    const enableLegacyScreenshotMethod = getMethodOrWicOption(saveScreenOptions.method, saveScreenOptions.wic, 'enableLegacyScreenshotMethod');
    const hideScrollBars = getMethodOrWicOption(saveScreenOptions.method, saveScreenOptions.wic, 'hideScrollBars');
    const hideElements = saveScreenOptions.method.hideElements || [];
    const removeElements = saveScreenOptions.method.removeElements || [];
    const waitForFontsLoaded = getMethodOrWicOption(saveScreenOptions.method, saveScreenOptions.wic, 'waitForFontsLoaded');
    // 2.  Prepare the beforeScreenshot
    const beforeOptions = {
        instanceData,
        addressBarShadowPadding,
        disableBlinkingCursor,
        disableCSSAnimation,
        enableLayoutTesting,
        hideElements,
        noScrollBars: hideScrollBars,
        removeElements,
        toolBarShadowPadding,
        waitForFontsLoaded,
    };
    const enrichedInstanceData = await beforeScreenshot(methods.executor, beforeOptions);
    const { browserName, browserVersion, deviceName, dimensions: { window: { devicePixelRatio, innerHeight, innerWidth, isEmulated, isLandscape, outerHeight, outerWidth, screenHeight, screenWidth, }, }, initialDevicePixelRatio, isAndroidChromeDriverScreenshot, isAndroidNativeWebScreenshot, isIOS, isMobile, isTestInBrowser, logName, name, platformName, platformVersion, } = enrichedInstanceData;
    // 3.  Take the screenshot
    let base64Image;
    if (canUseBidiScreenshot(methods) && !isMobile && !enableLegacyScreenshotMethod) {
        // 3a. Take the screenshot with the BiDi method
        base64Image = await takeBase64BiDiScreenshot({
            bidiScreenshot: methods.bidiScreenshot,
            getWindowHandle: methods.getWindowHandle,
        });
    }
    else {
        // 3b. Take the screenshot with the regular method
        base64Image = await takeBase64Screenshot(methods.screenShot);
        // Determine the rectangles
        const screenRectangleOptions = {
            devicePixelRatio: devicePixelRatio || NaN,
            enableLegacyScreenshotMethod,
            innerHeight: innerHeight || NaN,
            innerWidth: innerWidth || NaN,
            isAndroidChromeDriverScreenshot,
            isAndroidNativeWebScreenshot,
            isEmulated: isEmulated || false,
            initialDevicePixelRatio: initialDevicePixelRatio || NaN,
            isIOS,
            isLandscape,
        };
        const rectangles = determineScreenRectangles(base64Image, screenRectangleOptions);
        // 4.  Make a cropped base64 image
        base64Image = await makeCroppedBase64Image({
            addIOSBezelCorners,
            base64Image,
            deviceName,
            devicePixelRatio: devicePixelRatio || NaN,
            isIOS,
            isLandscape,
            rectangles,
        });
    }
    // 5.  The after the screenshot methods
    const afterOptions = {
        actualFolder: folders.actualFolder,
        base64Image,
        disableBlinkingCursor,
        disableCSSAnimation,
        enableLayoutTesting,
        filePath: {
            browserName,
            deviceName,
            isMobile,
            savePerInstance,
        },
        fileName: {
            browserName,
            browserVersion,
            deviceName,
            devicePixelRatio: devicePixelRatio || NaN,
            formatImageName,
            isMobile,
            isTestInBrowser,
            logName,
            name,
            outerHeight: outerHeight || NaN,
            outerWidth: outerWidth || NaN,
            platformName,
            platformVersion,
            screenHeight: screenHeight || NaN,
            screenWidth: screenWidth || NaN,
            tag,
        },
        hideElements,
        hideScrollBars,
        isLandscape,
        isNativeContext,
        platformName: instanceData.platformName,
        removeElements,
    };
    // 6.  Return the data
    return afterScreenshot(methods.executor, afterOptions);
}
