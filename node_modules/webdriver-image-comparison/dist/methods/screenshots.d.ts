import type { BidiScreenshot, Executor, GetWindowHandle, TakeScreenShot } from './methods.interfaces.js';
import type { FullPageScreenshotOptions, FullPageScreenshotNativeMobileOptions, FullPageScreenshotDataOptions, FullPageScreenshotsData, TakeWebElementScreenshot, TakeWebElementScreenshotData } from './screenshots.interfaces.js';
import type { RectanglesOutput } from './rectangles.interfaces.js';
/**
 * Take a full page screenshots for desktop / iOS / Android
 */
export declare function getBase64FullPageScreenshotsData(takeScreenshot: TakeScreenShot, executor: Executor, options: FullPageScreenshotDataOptions): Promise<FullPageScreenshotsData>;
/**
 * Take a full page screenshots for native mobile
 */
export declare function getMobileFullPageNativeWebScreenshotsData(takeScreenshot: TakeScreenShot, executor: Executor, options: FullPageScreenshotNativeMobileOptions): Promise<FullPageScreenshotsData>;
/**
 * Take a full page screenshot for Android with Chromedriver
 */
export declare function getAndroidChromeDriverFullPageScreenshotsData(takeScreenshot: TakeScreenShot, executor: Executor, options: FullPageScreenshotOptions): Promise<FullPageScreenshotsData>;
/**
 * Take a full page screenshots
 */
export declare function getDesktopFullPageScreenshotsData(takeScreenshot: TakeScreenShot, executor: Executor, options: FullPageScreenshotOptions): Promise<FullPageScreenshotsData>;
/**
 * Take a screenshot
 */
export declare function takeBase64Screenshot(takeScreenshot: TakeScreenShot): Promise<string>;
/**
 * Take a bidi screenshot
 */
export declare function takeBase64BiDiScreenshot({ bidiScreenshot, getWindowHandle, origin, clip }: {
    bidiScreenshot: BidiScreenshot;
    getWindowHandle: GetWindowHandle;
    origin?: 'viewport' | 'document';
    clip?: RectanglesOutput;
}): Promise<string>;
/**
 * Take an element screenshot on the web
 */
export declare function takeWebElementScreenshot({ devicePixelRatio, deviceRectangles, element, executor, fallback, initialDevicePixelRatio, isEmulated, innerHeight, isAndroidNativeWebScreenshot, isAndroid, isIOS, isLandscape, screenShot, takeElementScreenshot, }: TakeWebElementScreenshot): Promise<TakeWebElementScreenshotData>;
//# sourceMappingURL=screenshots.d.ts.map