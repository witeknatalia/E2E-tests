import type { RectanglesOutput } from './rectangles.interfaces.js';
type ExecuteScript = <ReturnValue, Args extends unknown[]>(fn: (...args: Args) => ReturnValue, ...args: Args) => Promise<ReturnValue>;
type ExecuteMobile = <ReturnValue>(fn: string, args?: Record<string, any>) => Promise<ReturnValue>;
interface BrowsingContextCaptureScreenshotParameters {
    context: string;
    origin?: 'viewport' | 'document';
    format?: {
        type: string;
        quality?: number;
    };
    clip?: {
        type: 'box';
        x: number;
        y: number;
        width: number;
        height: number;
    };
}
export type BidiScreenshot = (options: BrowsingContextCaptureScreenshotParameters) => Promise<{
    data: string;
}>;
export type Executor = ExecuteScript & ExecuteMobile;
export type GetElementRect = (elementId: string) => Promise<RectanglesOutput>;
export type GetWindowHandle = () => Promise<string>;
export type TakeScreenShot = () => Promise<string>;
export type TakeElementScreenshot = (elementId: string) => Promise<string>;
export interface Methods {
    bidiScreenshot?: BidiScreenshot;
    executor: Executor;
    getElementRect?: GetElementRect;
    getWindowHandle?: GetWindowHandle;
    screenShot: TakeScreenShot;
    takeElementScreenshot?: TakeElementScreenshot;
}
export {};
//# sourceMappingURL=methods.interfaces.d.ts.map