import getElementPositionTopDom from '../clientSideScripts/getElementPositionTopDom.js';
import { getBoundingClientRect } from '../clientSideScripts/getBoundingClientRect.js';
/**
 * Get the element position on a Android device
 */
export async function getElementPositionAndroid(executor, element, { deviceRectangles, isAndroidNativeWebScreenshot }) {
    // This is the native web screenshot
    if (isAndroidNativeWebScreenshot) {
        return getElementWebviewPosition(executor, element, { deviceRectangles });
    }
    // This is the ChromeDriver screenshot
    return executor(getBoundingClientRect, element);
}
/**
 * Get the element position on a desktop browser
 *
 * @param {function} executor         The function to execute JS in the browser
 * @param {number}   innerHeight      The inner height of the screen
 * @param {number}   screenshotHeight The screenshot height
 * @param {element}  element          The element
 *
 * @returns {Promise<{
 *    height: number,
 *    width: number,
 *    x: number,
 *    y: number
 * }>}
 */
export async function getElementPositionDesktop(executor, element, { innerHeight, screenshotHeight }) {
    if (screenshotHeight > innerHeight) {
        return executor(getElementPositionTopDom, element);
    }
    return executor(getBoundingClientRect, element);
}
/**
 * Get the element position calculated from the webview
 */
export async function getElementWebviewPosition(executor, element, { deviceRectangles: { viewport: { x, y } } }) {
    const { height, width, x: boundingClientX, y: boundingClientY } = (await executor(getBoundingClientRect, element));
    return {
        height,
        width,
        x: boundingClientX + x,
        y: boundingClientY + y,
    };
}
